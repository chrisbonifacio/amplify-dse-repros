type Todo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  description: String
  file: S3Object
}

type S3Object {
  bucket: String!
  key: String!
  region: String!
  mimeType: String!
  localUri: String!
}

type Project @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  team: Team @hasOne
}

type Team @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  project: Project @belongsTo
}

type Query {
  getAnalytics(msg: String!): String
    @auth(rules: [{ allow: public, provider: iam }])
    @function(name: "analyticsResolver-${env}")
}

type Customer
  @model
  @searchable
  @auth(
    rules: [
      # allow admins to create, update, delete
      { allow: groups, groups: ["admin"] }
      # allow all authenticated users to read
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  email: String!
  Mobile: String!
  customer_notes: String!
  admin_notes: String!
  city: City @hasOne
  cities: String
  langs: [String]
  owner: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type City @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  country: String!
  zipCode: String!
}

# subscription
type Subscription {
  onMutateCustomer: Customer
    @aws_subscribe(
      mutations: ["createCustomer", "updateCustomer", "deleteCustomer"]
    )

  onUpdateTodoByID(id: ID!): Todo @aws_subscribe(mutations: ["updateTodo"])
}
